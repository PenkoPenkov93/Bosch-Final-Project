
on:
  push:
    branches:
      - production

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build_and_push_docker_image:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Validate Dockerfile
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: false
        run: |
          docker run --rm -i hadolint/hadolint:v2.7.0 hadolint --ignore DL3008 - < Dockerfile

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Azure Container Registry
      uses: docker/login-action@v1
      with:
        registry: penkowebappregistry.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

#    - name: Create namespace
#      run: |
#        kubectl create namespace penkospace 

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          penkowebappregistry.azurecr.io/web-app-penko:${{ github.sha }}
          penkowebappregistry.azurecr.io/web-app-penko:latest

  deploy_to_aks:
    needs: build_and_push_docker_image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install and configure Azure CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y azure-cli
        az version
        echo "${{ secrets.AZURE_CREDENTIALS }}" > azure_credentials.json
        az login --service-principal -u ${{ secrets.AZURE_APP_ID }} -p ${{ secrets.AZURE_PASSWORD }} --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
    
#    - name: Create Resource Group
#      run: |
#        az group create --name penkowebappress --location westeurope

#    - name: Create AKS Cluster
#      run: |
#        az aks create --resource-group myresourcegroup --name myakscluster --node-count 1 --enable-addons monitoring --generate-ssh-keys

    - name: Get AKS Credentials
      run: |
         az aks get-credentials --name webAppAKSCluster --resource-group RG-Final-Project
   
    - name: Install kubectl
      run: |
         sudo az aks install-cli

    - name: Install jq and yq
      run: |
        sudo apt-get update && sudo apt-get install -y jq
        sudo wget -O /usr/bin/yq https://github.com/mikefarah/yq/releases/download/v4.12.1/yq_linux_amd64 && sudo chmod +x /usr/bin/yq

    - name: Apply manifests
      run: |
        kubectl apply -f manifest/deployment.yaml 
        kubectl apply -f manifest/service.yaml 

    - name: Deploy to AKS
      run: |
        kubectl set image deployment/web-app-penko web-app-penko=penkowebappregistry.azurecr.io/web-app-penko:${{ github.sha }}
        kubectl rollout status deployment/web-app-penko


  #      kubectl rollout status deployment/web-app-penko -n mynamespace
  #      kubectl rollout restart deployment/web-app-penko -n mynamespace
  #      kubectl rollout status deployment/web-app-penko -n mynamespace




