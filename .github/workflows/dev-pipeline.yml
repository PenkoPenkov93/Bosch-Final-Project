name: Dev Pipeline

on:
  push:
    branches:
      - dev

jobs:
  monitoring_script:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install psutil requests
      - name: Run monitoring script
        run: python3 metrics.py
  sonar_qube:
    needs: monitoring_script
    name: sonar_qube
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
 
  github_actions_exporter:
    needs: sonar_qube
    runs-on: self-hosted
    steps:
      - name: Clone GitHub Actions Exporter repository
        uses: actions/checkout@v3
        with:
          repository: Spendesk/github-actions-exporter
          path: github-actions-exporter
      - name: Build GitHub Actions Exporter Docker image
        run: |
          cd github-actions-exporter
          docker build -t spendeskplatform/github-actions-exporter:latest .
      - name: Run GitHub Actions Exporter
        run: |
          if docker ps -a --format '{{.Names}}' | grep -Eq "^github-actions-exporter-unique$"; then
            echo "Container already exists, skipping creation"
          else
            docker run -d \
              --name github-actions-exporter-unique \
              -p 9999:9999 \
              -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
              -e GITHUB_REPOSITORY=${{ github.repository }} \
              -e PROMETHEUS_PUSH_URL=http://104.214.223.114:9100 \
              -e PROMETHEUS_PUSH_GATEWAY_JOB_NAME=my_job \
              -e METRIC_GITHUB_WORKFLOW_RUN_DURATION_MS=${{ github.event.workflow_run.duration }} \
              -e METRIC_GITHUB_WORKFLOW_RUN_STATUS=${{ job.status }} \
              -e METRIC_GITHUB_RUNNER_STATUS=${{ runner.os }} \
              spendeskplatform/github-actions-exporter:latest
          fi

  build_and_push_docker_image:
    needs: sonar_qube
    runs-on: self-hosted
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Validate Dockerfile
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: false
        run: |
          docker run --rm -i hadolint/hadolint:v2.7.0 hadolint --ignore DL3008 - < Dockerfile
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to Azure Container Registry
      uses: docker/login-action@v1
      with:
        registry: penkowebappregistry.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          penkowebappregistry.azurecr.io/web-app-penko:${{ github.sha }}
          penkowebappregistry.azurecr.io/web-app-penko:latest

  deploy_to_aks:
    needs: [build_and_push_docker_image, sonar_qube] 
    runs-on: self-hosted
    if: success() && needs.sonar_qube.result == 'success'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install and configure Azure CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y azure-cli
        az version
        echo "${{ secrets.AZURE_CREDENTIALS }}" > azure_credentials.json
        az login --service-principal -u ${{ secrets.AZURE_APP_ID }} -p ${{ secrets.AZURE_PASSWORD }} --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
 
    - name: Get AKS Credentials
      run: |
         az aks get-credentials --name webAppPenko --resource-group RG-Final-Project

    - name: Install kubectl
      run: |
         sudo az aks install-cli

    - name: Install jq and yq
      run: |
        sudo apt-get update && sudo apt-get install -y jq
        sudo wget -O /usr/bin/yq https://github.com/mikefarah/yq/releases/download/v4.12.1/yq_linux_amd64 && sudo chmod +x /usr/bin/yq

    - name: Apply staging manifests
      run: |
        kubectl apply -f manifest/staging-deployment.yaml
        kubectl apply -f manifest/staging-service.yaml

    - name: Deploy to AKS (staging)
      run: |
        kubectl set image deployment/web-app-penko-staging web-app-penko=penkowebappregistry.azurecr.io/web-app-penko:${{ github.sha }}
        kubectl rollout status deployment/web-app-penko-staging
